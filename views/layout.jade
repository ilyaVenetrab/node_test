doctype html
html
    head
        if locals.title
            title= title
        else
            title New Sails App

        // Viewport mobile tag for sensible mobile support
        meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

        //-
          Stylesheets and Preprocessors
          ==============================

          You can always bring in CSS files manually with `<link>` tags, or asynchronously
          using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
          of Sails' conventional asset pipeline (boilerplate Gruntfile).

          By default, stylesheets from your `assets/styles` folder are included
          here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
          are supported. In production, your styles will be minified and concatenated into
          a single file.

          To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
          For example, here are a few things you could do:

              + Change the order of your CSS files
              + Import stylesheets from other directories
              + Use a different or additional preprocessor, like SASS, SCSS or Stylus

        // STYLES
        link(rel="stylesheet", href="/styles/importer.css")
        // STYLES END


        block styles

    body(data-ng-app='Twitter')
        block body

        //-
          Client-side Templates
          ========================

          HTML templates are important prerequisites of modern, rich client applications.
          To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
          that you load these templates client-side.

          By default, your Gruntfile is configured to automatically load and precompile
          client-side JST templates in your `assets/templates` folder, then
          include them here automatically (between TEMPLATES and TEMPLATES END).

          To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
          For example, here are a few things you could do:

              + Import templates from other directories
              + Use a different template engine (handlebars, jade, dust, etc.)
              + Internationalize your client-side templates using a server-side
                stringfile before they're served.

        // TEMPLATES
        
        // TEMPLATES END

        //-
          Client-side Javasrcipt
          ========================

          You can always bring in JS files manually with `srcipt` tags, or asynchronously
          on the client using a solution like AMD (RequireJS).  Or, if you like, you can
          take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

          By default, files in your `assets/js` folder are included here
          automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
          CoffeeScript (.coffee) are supported. In production, your srcipts will be minified
          and concatenated into a single file.

          To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
          For example, here are a few things you could do:

              + Change the order of your srcipts
              + Import srcipts from other directories
              + Use a different preprocessor, like TypeScript

        // SCRIPTS
        script(src="/js/dependencies/sails.io.js")
        script(src="bower_components/jquery/dist/jquery.min.js")
        script(src="bower_components/bootstrap/dist/js/bootstrap.min.js")
        script(src="bower_components/angular/angular.min.js")
        script(src="bower_components/angular-resource/angular-resource.min.js")
        script(src="bower_components/angular-route/angular-route.min.js")
        script(src="/js/app/module.js")
        script(src="/js/app/controllers/HomeController.js")
        script(src="/js/app/controllers/services/Post.js")
        // SCRIPTS END

